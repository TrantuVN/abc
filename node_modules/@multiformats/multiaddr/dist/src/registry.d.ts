export declare const V = -1;
export interface ProtocolCodec {
    code: number;
    name: string;
    size?: number;
    path?: boolean;
    resolvable?: boolean;
    aliases?: string[];
    /**
     * Where the multiaddr has been encoded as a string, decode the value if
     * necessary, unescaping any escaped values
     */
    stringToValue?(value: string): string;
    /**
     * To encode the multiaddr as a string, escape any necessary values
     */
    valueToString?(value: string): string;
    /**
     * To encode the multiaddr as bytes, convert the value to bytes
     */
    valueToBytes?(value: string): Uint8Array;
    /**
     * To decode bytes to a multiaddr, convert the value bytes to a string
     */
    bytesToValue?(bytes: Uint8Array): string;
    /**
     * Perform any necessary validation on the string value
     */
    validate?(value: string): void;
}
declare class Registry {
    private protocolsByCode;
    private protocolsByName;
    getCodec(key: string | number): ProtocolCodec;
    addCodec(key: number, codec: ProtocolCodec, aliases?: string[]): void;
    deleteCodec(key: number): void;
}
export declare const registry: Registry;
export {};
//# sourceMappingURL=registry.d.ts.map